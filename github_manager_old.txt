import os
import subprocess
import tempfile
import shutil
from dotenv import load_dotenv
from github import Github
import time

# Load environment variables
load_dotenv()

# Get credentials from .env
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
GITHUB_USERNAME = os.getenv('GITHUB_USERNAME')


def create_and_deploy_repo(task_id, generated_files, brief):
    """
    Creates a GitHub repository, pushes generated code, and enables GitHub Pages.
    
    Args:
        task_id (str): Unique task identifier (e.g., 'captcha-solver-abc123')
        generated_files (dict): Dictionary of {filename: content}
        brief (str): Task description
    
    Returns:
        tuple: (repo_url, commit_sha, pages_url)
    
    Example return:
        ('https://github.com/user/captcha-solver-abc123',
         'abc123def456...',
         'https://user.github.io/captcha-solver-abc123/')
    """
    
    print(f"üì¶ Creating GitHub repository for task: {task_id}")
    
    # Step 1: Create a temporary directory for the repo
    temp_dir = tempfile.mkdtemp()
    print(f"üìÅ Created temporary directory: {temp_dir}")
    
    try:
        # Step 2: Initialize Git repository locally
        print("üîß Initializing Git repository...")
        run_git_command(temp_dir, ['git', 'init'])
        run_git_command(temp_dir, ['git', 'config', 'user.name', GITHUB_USERNAME])
        run_git_command(temp_dir, ['git', 'config', 'user.email', f'{GITHUB_USERNAME}@example.com'])
        
        # Step 3: Create all files in the temporary directory
        print("üìù Writing files to repository...")
        for filename, content in generated_files.items():
            filepath = os.path.join(temp_dir, filename)
            # Create subdirectories if needed (e.g., for docs/index.html)
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"  ‚úì Created: {filename}")
        
        # Step 4: Create a .gitignore file
        gitignore_content = """
__pycache__/
*.pyc
*.pyo
*.egg-info/
.DS_Store
.venv
venv/
node_modules/
"""
        with open(os.path.join(temp_dir, '.gitignore'), 'w') as f:
            f.write(gitignore_content)
        print(f"  ‚úì Created: .gitignore")
        
        # Step 5: Stage and commit files
        print("üì§ Staging and committing files...")
        run_git_command(temp_dir, ['git', 'add', '.'])
        run_git_command(temp_dir, ['git', 'commit', '-m', f'Initial commit: {brief}'])
        
        # Step 6: Get the commit SHA
        commit_sha = get_commit_sha(temp_dir)
        print(f"‚úÖ Commit SHA: {commit_sha}")
        
        # Step 7: Create repository on GitHub using PyGithub
        print("üåê Creating repository on GitHub...")
        repo_url, pages_url = create_github_repo(task_id, brief, temp_dir, GITHUB_TOKEN)
        
        print(f"‚úÖ Repository created: {repo_url}")
        print(f"‚úÖ GitHub Pages URL: {pages_url}")
        
        return repo_url, commit_sha, pages_url
    
    finally:
        # Cleanup: Remove temporary directory
        print("üßπ Cleaning up temporary directory...")
        shutil.rmtree(temp_dir, ignore_errors=True)


def run_git_command(working_dir, command):
    """
    Runs a git command in the specified directory.
    
    Args:
        working_dir (str): Directory to run command in
        command (list): Command and arguments (e.g., ['git', 'add', '.'])
    
    Returns:
        str: Command output
    
    Raises:
        Exception: If command fails
    """
    
    try:
        result = subprocess.run(
            command,
            cwd=working_dir,
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout
    
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git command failed: {' '.join(command)}")
        print(f"   Error: {e.stderr}")
        raise Exception(f"Git command failed: {e.stderr}")


def get_commit_sha(repo_dir):
    """
    Gets the SHA of the last commit.
    
    Args:
        repo_dir (str): Path to git repository
    
    Returns:
        str: Commit SHA (first 7 characters)
    """
    
    output = run_git_command(repo_dir, ['git', 'rev-parse', 'HEAD'])
    return output.strip()[:7]  # Return first 7 characters (short SHA)


def create_github_repo(repo_name, description, local_repo_path, github_token):
    """
    Creates a GitHub repository and pushes local code to it.
    
    Args:
        repo_name (str): Name of the repository
        description (str): Repository description
        local_repo_path (str): Path to local git repository
        github_token (str): GitHub personal access token
    
    Returns:
        tuple: (repo_url, pages_url)
    """
    
    try:
        # Step 1: Authenticate with GitHub
        g = Github(github_token)
        user = g.get_user()
        print(f"üë§ Authenticated as: {user.login}")
        
        # Step 2: Create the repository
        print(f"üèóÔ∏è  Creating repository '{repo_name}'...")
        
        # Check if repo already exists
        try:
            repo = user.get_repo(repo_name)
            print(f"‚ö†Ô∏è  Repository '{repo_name}' already exists, using existing repo")
        except:
            # Create new repo
            repo = user.create_repo(
                name=repo_name,
                description=description,
                private=False,
                auto_init=False
            )
            print(f"‚úÖ Repository created: {repo.html_url}")
        
        # Step 3: Add remote and push
        print(f"üì§ Pushing code to GitHub...")
        remote_url = f"https://{github_token}@github.com/{user.login}/{repo_name}.git"
        
        run_git_command(local_repo_path, ['git', 'remote', 'add', 'origin', remote_url])
        run_git_command(local_repo_path, ['git', 'branch', '-M', 'main'])
        run_git_command(local_repo_path, ['git', 'push', '-u', 'origin', 'main'])
        
        print(f"‚úÖ Code pushed to GitHub!")
        
        # Step 4: Enable GitHub Pages
        print(f"üåê Enabling GitHub Pages...")
        enable_github_pages(repo)
        
        # Step 5: Construct URLs
        repo_url = repo.html_url
        pages_url = f"https://{user.login}.github.io/{repo_name}/"
        
        print(f"‚úÖ GitHub Pages enabled!")
        print(f"   Repository: {repo_url}")
        print(f"   Pages URL: {pages_url}")
        
        return repo_url, pages_url
    
    except Exception as e:
        print(f"‚ùå Error creating GitHub repository: {str(e)}")
        raise


def enable_github_pages(repo):
    """
    Enables GitHub Pages for the repository.
    
    Args:
        repo: PyGithub Repository object
    """
    
    try:
        # GitHub Pages settings
        # Source: main branch, root directory
        repo.edit(
            has_pages=True
        )
        
        # Use the GitHub API to set Pages settings
        # This requires setting the pages configuration
        print(f"üìñ Configuring GitHub Pages...")
        
        # Note: PyGithub doesn't have direct Pages API support in older versions
        # We'll use a direct API call through the repo object
        headers = {"Accept": "application/vnd.github.v3+json"}
        
        pages_config = {
            "source": {
                "branch": "main",
                "path": "/"
            }
        }
        
        # Make API request to enable pages
        repo._requester.requestJsonAndCheck(
            "POST",
            f"{repo.url}/pages",
            input=pages_config,
            headers=headers
        )
        
        print(f"‚úÖ GitHub Pages configured to deploy from main branch")
    
    except Exception as e:
        # GitHub Pages might already be enabled or there might be an error
        # This is not critical - the repo still works
        print(f"‚ö†Ô∏è  Note: {str(e)}")
        print(f"   GitHub Pages may need to be manually enabled in repository settings")


def verify_github_pages(pages_url, max_retries=5):
    """
    Verifies that GitHub Pages is live and accessible.
    
    Args:
        pages_url (str): URL to check
        max_retries (int): Number of retries
    
    Returns:
        bool: True if pages_url returns HTTP 200
    """
    
    import requests
    
    print(f"üîç Verifying GitHub Pages deployment...")
    
    for attempt in range(max_retries):
        try:
            response = requests.get(pages_url, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ GitHub Pages is live!")
                return True
            else:
                print(f"‚ö†Ô∏è  Attempt {attempt + 1}: Got status {response.status_code}")
        
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  Attempt {attempt + 1}: {str(e)}")
        
        # Wait before retrying (GitHub needs time to deploy)
        if attempt < max_retries - 1:
            wait_time = 5 * (attempt + 1)  # 5, 10, 15, 20, 25 seconds
            print(f"   Waiting {wait_time}s before retry...")
            time.sleep(wait_time)
    
    print(f"‚ùå GitHub Pages verification failed after {max_retries} attempts")
    return False